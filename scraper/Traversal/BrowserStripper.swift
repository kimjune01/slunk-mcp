// Temporary stripper for browsers until the window is properly parsed

public class BrowserStripper {
    public static let browsers = [
        "GoogleChrome",
        "Safari",
        "Brave",
        "Opera",
        "Firefox",
        "Vivaldi",
        "Edge",
        "Arc",
        "Microsoft Edge",
        "Brave Browser",
    ]
    public static func compress(_ description: String) -> String {
        return filterUIElements(description)
    }

    // Generated by LB
    static func filterUIElements(_ text: String) -> String {
        // Common UI-related phrases to filter out
        let uiPhrases = [
            "Close",
            "Back",
            "Forward",
            "Reload",
            "Search tabs",
            "New Tab",
            "Extensions",
            "About this result",
            "View site information",
            "Bookmark this tab",
            "Search",
            "Clear",
            "Show more",
            "Feedback",
            "Skip",
            "Guide",
            "Tools",
            "Memory usage",
            "Has access to this site",
            "Privacy",
            "Send feedback",
            "Update location",
            "Terms",
            "Open Navigation Menu",
            "Edit",
            "Redo",
            "Refresh",
            "Exit",
            "Submit",
            "Apply",
            "Reset",
            "Load more",
            "Expand",
            "Collapse",
            "Open settings",
            "Show details",
            "Hide details",
            "Filter",
            "Sort",
            "Advanced search",
            "Find",
            "Quick search",
            "Search history",
            "Recent searches",
            "Open in new window",
            "Open in new tab",
            "Duplicate tab",
            "Manage windows",
            "Close all tabs",
            "Manage account",
            "Permissions",
            "Security settings",
            "Site settings",
            "Cookies & site data",
            "Block pop-ups",
            "Privacy settings",
            "Report issue",
            "Contact support",
            "Troubleshoot",
            "FAQs",
            "Accessibility options",
            "Notifications",
            "System info",
            "Network status",
            "Performance monitor",
            "Battery usage",
        ]

        // UI-related patterns to filter using regular expressions
        let uiPatterns = [
            #"- Memory usage - \d+ MB"#,
            #"About this result"#,
            #"View related links"#,
            #"Close$"#,
            #"^Search"#,
            #"^Show more"#,
            #"Accessibility.*"#,
            #"Clear search.*"#,
            #"Google Account:.*"#,
        ]

        let filteredLines = text.components(separatedBy: .newlines)
            .map { $0.trimmingCharacters(in: .whitespaces).replacingOccurrences(of: "\u{200B}", with: "") }
            .filter { line in
                // Filter out empty lines
                guard !line.isEmpty else { return false }

                // Filter out lines that are just UI phrases
                guard !uiPhrases.contains(where: { line == $0 }) else { return false }

                // Filter out lines matching UI patterns
                guard !uiPatterns.contains(where: {
                    line.range(of: $0, options: .regularExpression) != nil
                }) else { return false }

                // Keep lines that likely contain user content
                return true
            }

        // Remove runs of lines
        var result: [String] = []
        var previousLine: String?

        for line in filteredLines {
            let trimmed = line.trimmingCharacters(in: .whitespaces)
            if trimmed != previousLine {
                result.append(line)
                previousLine = trimmed
            }
        }

        return result.joined(separator: "\n")
    }
}
